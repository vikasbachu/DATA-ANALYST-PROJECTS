CREATE DATABASE HR_DATA;
USE HR_DATA;

CREATE TABLE employees (
    Age INT,
    Attrition VARCHAR(10),
    BusinessTravel VARCHAR(50),
    DailyRate INT,
    Department VARCHAR(50),
    DistanceFromHome INT,
    Education INT,
    EducationField VARCHAR(50),
    EmployeeCount INT,
    EmployeeNumber INT,
    EnvironmentSatisfaction INT,
    Gender VARCHAR(10),
    HourlyRate INT,
    JobInvolvement INT,
    JobLevel INT,
    JobRole VARCHAR(50),
    JobSatisfaction INT,
    MaritalStatus VARCHAR(20),
    MonthlyIncome INT,
    MonthlyRate INT,
    NumCompaniesWorked INT,
    Over18 VARCHAR(5),
    OverTime VARCHAR(5),
    PercentSalaryHike INT,
    PerformanceRating INT,
    RelationshipSatisfaction INT,
    StandardHours INT,
    StockOptionLevel INT,
    TotalWorkingYears INT,
    TrainingTimesLastYear INT,
    WorkLifeBalance INT,
    YearsAtCompany INT,
    YearsInCurrentRole INT,
    YearsSinceLastPromotion INT,
    YearsWithCurrManager INT
);

SELECT * FROM EMPLOYEES;

-- ATTRITION RATE
SELECT 
    Attrition, 
    COUNT(*) AS Total
FROM employees
GROUP BY Attrition;

-- ATTRITION PERCENTAGE
SELECT 
    Attrition, 
    COUNT(*) AS Total,
    ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM employees), 2) AS Percentage
FROM employees
GROUP BY Attrition;

-- DATA CLEANUP QUERY
SELECT *
FROM employees
WHERE MonthlyIncome IS NOT NULL
  AND Department IS NOT NULL;


-- AVERAGE INCOME BY ROLE
SELECT
	JOBROLE, ROUND(AVG(MONTHLYINCOME),2) AS AVG_MONTHLY_INCOME
FROM EMPLOYEES
GROUP BY JOBROLE;

-- WORKLIFE BALANCE VS ATTRITION
SELECT
     WORKLIFEBALANCE, ATTRITION, COUNT(*) AS COUNT
FROM EMPLOYEES 
GROUP BY WORKLIFEBALANCE, ATTRITION
ORDER BY WORKLIFEBALANCE;

-- AVERAGE AGE OF AN EMPLOYEE BY ROLE & DEPARTMENT
SELECT 
     DEPARTMENT, JOBROLE, AVG(AGE) AS AVERAGE_AGE
FROM EMPLOYEES
GROUP BY JOBROLE, DEPARTMENT;

-- AGE GROUP DISTIBUTION
SELECT 
    CASE 
WHEN AGE< 25 THEN 'UNDER 25'
WHEN AGE BETWEEN 25 AND 34 THEN '25-34'
WHEN AGE BETWEEN 35 AND 44 THEN '35-44'
WHEN AGE BETWEEN 45 AND 54 THEN '45-54'
ELSE '55+'
END AS AGE_GROUP, COUNT(*) AS COUNT
FROM EMPLOYEES
GROUP BY AGE_GROUP 
ORDER BY AGE_GROUP;

-- COUNT OF EMPLOYEES BY DEPT & ROLE
SELECT 
     DEPARTMENT,JOBROLE, COUNT(*) AS COUNT
FROM EMPLOYEES
GROUP BY DEPARTMENT, JOBROLE
ORDER BY COUNT;

-- EMPLOYEE ABOUT TO LEAVE DUE TO LESS SATISFACTION 
SELECT 
     EMPLOYEENUMBER,
     AGE , 
     JOBROLE, 
     DEPARTMENT, 
     JOBSATISFACTION , 
     OVERTIME,  
     ATTRITION 
FROM EMPLOYEES
WHERE OVERTIME ='Yes'
AND JOBSATISFACTION <=2
AND ATTRITION ='Yes';

-- COUNT OF EMPLOYEES BY SATISFACTION
SELECT 
     DEPARTMENT,
     JOBSATISFACTION,
     COUNT(*) AS COUNT
FROM EMPLOYEES
GROUP BY DEPARTMENT,JOBSATISFACTION
ORDER BY DEPARTMENT,JOBSATISFACTION;

-- COUNT OF EMPLOYEES BY MARITAL STATUS
SELECT 
    MARITALSTATUS, COUNT(*) AS COUNT
FROM EMPLOYEES
GROUP BY MARITALSTATUS;

-- TOP 10 ROLES BY ATTRITION
SELECT 
	JOBROLE, DEPARTMENT , COUNT(*) AS ATTRITION_COUNT
FROM EMPLOYEES
WHERE ATTRITION ="YES"
GROUP BY JOBROLE, DEPARTMENT 
ORDER  BY ATTRITION_COUNT DESC
LIMIT 10;

-- ATTRITION RATE BY DEPT  
SELECT 
    Department,
    COUNT(*) AS Total_Employees,
    SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) AS Attritions,
    ROUND(SUM(CASE WHEN Attrition = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS Attrition_Percentage
FROM employees
GROUP BY Department
ORDER BY Attrition_Percentage DESC;


-- AVERAGE MONTHLY INCOME VS ATTRITION
SELECT 
    Attrition, 
    ROUND(AVG(MonthlyIncome), 2) AS Avg_Monthly_Income
FROM employees
GROUP BY Attrition;

-- RANKING OF EMPLOYEE BY DEPT
SELECT 
    EMPLOYEENUMBER, 
    DEPARTMENT, 
    MONTHLYINCOME,
    RANK() OVER(PARTITION BY DEPARTMENT ORDER BY MONTHLYINCOME DESC) AS DEPT_SALARY
FROM EMPLOYEES;

-- TOTAL INCOME BY DEPARTMENT
SELECT
	DEPARTMENT, SUM(MONTHLYINCOME) AS TOTAL_INCOME
FROM EMPLOYEES
GROUP BY DEPARTMENT;

-- TOP 5 EMPLOYEES BY SALARY & RANKING FROM EACH DEPT
DELIMITER //

CREATE PROCEDURE GetTopEarners(IN TopN INT)
BEGIN
    WITH RankedSalaries AS (
        SELECT 
            EmployeeNumber,
            Department,
            JobRole,
            MonthlyIncome,
            RANK() OVER(PARTITION BY Department ORDER BY MonthlyIncome DESC) AS SalaryRank
        FROM employees
    )
    SELECT 
        EmployeeNumber,
        Department,
        JobRole,
        MonthlyIncome,
        SalaryRank
    FROM RankedSalaries
    WHERE SalaryRank <= TopN
    ORDER BY Department, SalaryRank;
END //

DELIMITER ;

CALL GetTopEarners(5);




-- MAX SALARY BY DEPT
SELECT DEPARTMENT , MAX(MONTHLYINCOME) AS MAX_SALARY, MIN(MONTHLYINCOME) AS MIN_SALARY
FROM EMPLOYEES
GROUP BY DEPARTMENT;







